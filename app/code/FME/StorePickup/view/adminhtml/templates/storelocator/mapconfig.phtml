<?php 
$helper = $this->_storeAdminHelper;
$mapKey = $helper->getGMapAPIKey();


$blockGrid = $block->getBlockGrid();
  if($blockGrid)
  {
      foreach($blockGrid as $Grid )
      {

        $latupdate = $Grid['latitude'];
        $lngupdate = $Grid['longitude'];  
      }
  }
  else
  {
    $latupdate = '';
    $lngupdate = ''; 
  }

?>  
<style>
#map {
  height: 300px;
}
</style>

<!-- <input id="pac-input" /> -->

<input id="pac-input" size="100%">
<!-- <div id="type-selector" class="controls">
      <input type="radio" name="type" id="changetype-all" checked="checked">
      <label for="changetype-all">All</label>

      <input type="radio" name="type" id="changetype-establishment">
      <label for="changetype-establishment">Establishments</label>
      <input type="radio" name="type" id="changetype-address">
      <label for="changetype-address">Addresses</label>

      <input type="radio" name="type" id="changetype-geocode">
      <label for="changetype-geocode">Geocodes</label>
</div> -->
<div class="admin__fieldset-wrapper-content admin__fieldset">      
<div class="admin__field _required form-control">
    <label class="admin__field-label">
        <span>Latitude</span>
    </label>
  <div class="admin__field-control _required">        
      <input class="admin__control-text" data-form-part="storepickup_storelocator_form"   name="latitude" type="text" value="<?php echo $latupdate ?>">
    </div>
</div>

<div class="admin__field _required">
    <label class="admin__field-label">
        <span>Longitude</span>
    </label>
  <div class="admin__field-control form-control">        
      <input class="admin__control-text " data-form-part="storepickup_storelocator_form"  name="longitude" type="text" value="<?php echo $lngupdate?>">
    </div>
</div>

<h5><p style="margin-left: 274px">Enter a Location, Drag the Marker to Populate the Latitude and Longitude in the Form Fields.</p></h5>  
    
    <div id="map" style="float: right;width: 74%; border:thin outset"  ></div>
</div>
<script>
var map;
function initMap() {
  var map = new google.maps.Map(document.getElementById('map'), {
    center: {
      lat: -7.0157404,
      lng: 110.4171283
    },
    zoom: 17
  });
  var input = /** @type {!HTMLInputElement} */ (
    document.getElementById('pac-input'));
  var types = document.getElementById('type-selector');
  map.controls[google.maps.ControlPosition.TOP_LEFT].push(input);
  map.controls[google.maps.ControlPosition.TOP_LEFT].push(types);

  var autocomplete = new google.maps.places.Autocomplete(input);
  autocomplete.bindTo('bounds', map);

  var infowindow = new google.maps.InfoWindow();
  var marker = new google.maps.Marker({
    map: map,
    anchorPoint: new google.maps.Point(0, -29),
    draggable: true
  });
  google.maps.event.addListener(marker, 'dragend', function() {
     document.getElementsByName('latitude')[0].value = marker.getPosition().lat();
     document.getElementsByName('longitude')[0].value = marker.getPosition().lng();
  })

  autocomplete.addListener('place_changed', function() {
    infowindow.close();
    marker.setVisible(false);
    var place = autocomplete.getPlace();
    if (!place.geometry) {
      window.alert("Autocomplete's returned place contains no geometry");
      return;
    }

    // If the place has a geometry, then present it on a map.
    if (place.geometry.viewport) {
      map.fitBounds(place.geometry.viewport);
    } else {
      map.setCenter(place.geometry.location);
      map.setZoom(17); 
    }
    marker.setIcon(({
      url: 'http://maps.google.com/mapfiles/ms/icons/red.png',
      size: new google.maps.Size(71, 71),
      origin: new google.maps.Point(0, 0),
      anchor: new google.maps.Point(17, 34),
      scaledSize: new google.maps.Size(35, 35)
    }));
    marker.setPosition(place.geometry.location);
    marker.setVisible(true);

    var address = '';
    if (place.address_components) {
      address = [
        (place.address_components[0] && place.address_components[0].short_name || ''),
        (place.address_components[1] && place.address_components[1].short_name || ''),
        (place.address_components[2] && place.address_components[2].short_name || '')
      ].join(' ');
    }

    var latitude = place.geometry.location.lat();
    var longitude = place.geometry.location.lng();

    $("input[name=coordinate]").val(address);
    $("input[name=latitude]").val(latitude);
    $("input[name=longitude]").val(longitude);

    infowindow.setContent('<div><strong>' + place.name + '</strong><br>' + address);
    infowindow.open(map, marker);
  });

  // Sets a listener on a radio button to change the filter type on Places
  // Autocomplete.
  function setupClickListener(id, types) {
    var radioButton = document.getElementById(id);
    radioButton.addEventListener('click', function() {
      autocomplete.setTypes(types);
    });
  }

  setupClickListener('changetype-all', []);
  setupClickListener('changetype-address', ['address']);
  setupClickListener('changetype-establishment', ['establishment']);
  setupClickListener('changetype-geocode', ['geocode']);
  google.maps.event.addDomListener(window, "load", initMap);
}
</script>   
<?php if($helper->getGMapAPIKey()): ?>
<script type="text/javascript" src="https://maps.googleapis.com/maps/api/js?v=3&key=<?php echo $helper->getGMapAPIKey(); ?>&sensor=false&callback=initMap&libraries=places"></script>
<?php else: ?>
<script type="text/javascript" src="https://maps.googleapis.com/maps/api/js?v=3&sensor=false&callback=initMap&libraries=places"></script>
<?php endif; 

